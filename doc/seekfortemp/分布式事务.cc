1.CAP定理
  Consistency(一致性): 所有节点在同一时间具有相同的数据
  Availability(可用性): 保证每个请求不管成功或者失败都有响应
  Partition tolerance(分隔容忍性): 系统中任意信息的丢失或失败不会影响系统的继续运作
  分布式事务必须满足CAP定理，但是CAP定理是3点不可能同时存在。

2.两阶段提交协议
  2.1预提交阶段(Pre-Commit Phase)
  决策后阶段(Post-Decision Phase)
  如果一个操作需要更新3个service，其中一个service异常，那么另外两个service应该监测到并且回滚他们的操作。
  为了实现两阶段提交，事务中涉及的service必须能相互之间进行通讯。一般来说一个service会被指定为提交服务，并监测其他service的信息。
  比如事务需要更改两个service数据，先发送预提交操作到两个点上，看是否响应正常，如果响应正常，那么就最终进行两个点的事务提交，如果没有响应，那么就回滚。
  一般可以用atomikos来实现。
  但是响应速度慢，不适合高并发系统，但是前提是都在一个系统当中。所以像dubbo这种RPC调用的就不适用了。

  2.2 另一种是使用异步消息补偿，前提是业务逻辑是第一阶段成功，第二阶段必须成功的场景。这个可以使用队列的ACK失败重试的特性。

  2.3 



3.使用消息队列来避免分布式事务
  A节点完成数据更新操作后，发送消息到B节点，同时在A节点中记录相关消息。B节点处理完后，调用A的接口，删除消息表的相关数据。
  A定期轮询消息表，再发起请求给B，如果B确实没处理完，那么就不管。如果B处理完了，那么就删除消息表的相关数据。